{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importing libraries\n",
    "%matplotlib inline\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.cluster import KMeans\n",
    "from sklearn.metrics import silhouette_score\n",
    "from sklearn.decomposition import PCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the dataset\n",
    "data = pd.read_csv(r\"data.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>Channel</th>\n",
       "      <th>TotalTransactionAmount</th>\n",
       "      <th>Tx_Count</th>\n",
       "      <th>DaysSinceLastTrans</th>\n",
       "      <th>reseller_id</th>\n",
       "      <th>superdealer_id</th>\n",
       "      <th>Product_ServiceProvider</th>\n",
       "      <th>Product_Type</th>\n",
       "      <th>Product_Category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1191</td>\n",
       "      <td>8.0</td>\n",
       "      <td>532700</td>\n",
       "      <td>137</td>\n",
       "      <td>30</td>\n",
       "      <td>1130.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>Jos Electric</td>\n",
       "      <td>Postpaid</td>\n",
       "      <td>Electricity</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1287</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1635552</td>\n",
       "      <td>131</td>\n",
       "      <td>30</td>\n",
       "      <td>0.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>MTN</td>\n",
       "      <td>Airtime</td>\n",
       "      <td>Telco</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1168</td>\n",
       "      <td>8.0</td>\n",
       "      <td>548300</td>\n",
       "      <td>114</td>\n",
       "      <td>30</td>\n",
       "      <td>1130.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>Jos Electric</td>\n",
       "      <td>Postpaid</td>\n",
       "      <td>Electricity</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1119</td>\n",
       "      <td>2.0</td>\n",
       "      <td>12200</td>\n",
       "      <td>13</td>\n",
       "      <td>30</td>\n",
       "      <td>0.0</td>\n",
       "      <td>447.0</td>\n",
       "      <td>Airtel</td>\n",
       "      <td>Data</td>\n",
       "      <td>Telco</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1168</td>\n",
       "      <td>8.0</td>\n",
       "      <td>211700</td>\n",
       "      <td>75</td>\n",
       "      <td>30</td>\n",
       "      <td>1130.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>Jos Electric</td>\n",
       "      <td>Prepaid</td>\n",
       "      <td>Electricity</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1119</td>\n",
       "      <td>1.0</td>\n",
       "      <td>53400</td>\n",
       "      <td>106</td>\n",
       "      <td>30</td>\n",
       "      <td>0.0</td>\n",
       "      <td>447.0</td>\n",
       "      <td>MTN</td>\n",
       "      <td>Airtime</td>\n",
       "      <td>Telco</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1183</td>\n",
       "      <td>8.0</td>\n",
       "      <td>276700</td>\n",
       "      <td>134</td>\n",
       "      <td>30</td>\n",
       "      <td>1130.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>Jos Electric</td>\n",
       "      <td>Prepaid</td>\n",
       "      <td>Electricity</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>919</td>\n",
       "      <td>1.0</td>\n",
       "      <td>75100</td>\n",
       "      <td>319</td>\n",
       "      <td>30</td>\n",
       "      <td>0.0</td>\n",
       "      <td>447.0</td>\n",
       "      <td>Glo</td>\n",
       "      <td>Airtime</td>\n",
       "      <td>Telco</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>919</td>\n",
       "      <td>1.0</td>\n",
       "      <td>97350</td>\n",
       "      <td>265</td>\n",
       "      <td>30</td>\n",
       "      <td>0.0</td>\n",
       "      <td>447.0</td>\n",
       "      <td>MTN</td>\n",
       "      <td>Airtime</td>\n",
       "      <td>Telco</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1437</td>\n",
       "      <td>2.0</td>\n",
       "      <td>900</td>\n",
       "      <td>9</td>\n",
       "      <td>30</td>\n",
       "      <td>0.0</td>\n",
       "      <td>447.0</td>\n",
       "      <td>Glo</td>\n",
       "      <td>Data</td>\n",
       "      <td>Telco</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id  Channel  TotalTransactionAmount  Tx_Count  DaysSinceLastTrans  \\\n",
       "0     1191      8.0                  532700       137                  30   \n",
       "1     1287      1.0                 1635552       131                  30   \n",
       "2     1168      8.0                  548300       114                  30   \n",
       "3     1119      2.0                   12200        13                  30   \n",
       "4     1168      8.0                  211700        75                  30   \n",
       "5     1119      1.0                   53400       106                  30   \n",
       "6     1183      8.0                  276700       134                  30   \n",
       "7      919      1.0                   75100       319                  30   \n",
       "8      919      1.0                   97350       265                  30   \n",
       "9     1437      2.0                     900         9                  30   \n",
       "\n",
       "   reseller_id  superdealer_id Product_ServiceProvider Product_Type  \\\n",
       "0       1130.0            18.0            Jos Electric     Postpaid   \n",
       "1          0.0            18.0                     MTN      Airtime   \n",
       "2       1130.0            18.0            Jos Electric     Postpaid   \n",
       "3          0.0           447.0                  Airtel         Data   \n",
       "4       1130.0            18.0            Jos Electric      Prepaid   \n",
       "5          0.0           447.0                     MTN      Airtime   \n",
       "6       1130.0            18.0            Jos Electric      Prepaid   \n",
       "7          0.0           447.0                     Glo      Airtime   \n",
       "8          0.0           447.0                     MTN      Airtime   \n",
       "9          0.0           447.0                     Glo         Data   \n",
       "\n",
       "  Product_Category  \n",
       "0      Electricity  \n",
       "1            Telco  \n",
       "2      Electricity  \n",
       "3            Telco  \n",
       "4      Electricity  \n",
       "5            Telco  \n",
       "6      Electricity  \n",
       "7            Telco  \n",
       "8            Telco  \n",
       "9            Telco  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Preview the top of our data\n",
    "data.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "543"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's check for missing values\n",
    "data.isnull().sum().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's drop empty values\n",
    "data.dropna(inplace=True)\n",
    "\n",
    "# Let's check missing values\n",
    "data.isnull().sum().sum()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's check for duplicates\n",
    "data.duplicated().sum().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's drop duplicates\n",
    "data.drop_duplicates(inplace=True)\n",
    "\n",
    "# Let's check for duplicates again\n",
    "data.duplicated().sum().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2452, 10)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking the shape of our data\n",
    "data.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>Our dataset has 2452 observations and 10 features/variables.</b>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 2452 entries, 0 to 2634\n",
      "Data columns (total 10 columns):\n",
      " #   Column                   Non-Null Count  Dtype  \n",
      "---  ------                   --------------  -----  \n",
      " 0   user_id                  2452 non-null   int64  \n",
      " 1   Channel                  2452 non-null   float64\n",
      " 2   TotalTransactionAmount   2452 non-null   int64  \n",
      " 3   Tx_Count                 2452 non-null   int64  \n",
      " 4   DaysSinceLastTrans       2452 non-null   int64  \n",
      " 5   reseller_id              2452 non-null   float64\n",
      " 6   superdealer_id           2452 non-null   float64\n",
      " 7   Product_ServiceProvider  2452 non-null   object \n",
      " 8   Product_Type             2452 non-null   object \n",
      " 9   Product_Category         2452 non-null   object \n",
      "dtypes: float64(3), int64(4), object(3)\n",
      "memory usage: 210.7+ KB\n"
     ]
    }
   ],
   "source": [
    "# Preview Columns name and info\n",
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>Channel</th>\n",
       "      <th>TotalTransactionAmount</th>\n",
       "      <th>Tx_Count</th>\n",
       "      <th>DaysSinceLastTrans</th>\n",
       "      <th>reseller_id</th>\n",
       "      <th>superdealer_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2452.000000</td>\n",
       "      <td>2452.000000</td>\n",
       "      <td>2.452000e+03</td>\n",
       "      <td>2452.000000</td>\n",
       "      <td>2452.000000</td>\n",
       "      <td>2452.000000</td>\n",
       "      <td>2452.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1275.206770</td>\n",
       "      <td>1.674551</td>\n",
       "      <td>5.540556e+04</td>\n",
       "      <td>90.733687</td>\n",
       "      <td>114.360930</td>\n",
       "      <td>107.151713</td>\n",
       "      <td>396.193312</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>655.443053</td>\n",
       "      <td>1.846882</td>\n",
       "      <td>5.649720e+05</td>\n",
       "      <td>1250.864387</td>\n",
       "      <td>71.197708</td>\n",
       "      <td>376.064464</td>\n",
       "      <td>269.796894</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>30.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>838.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000e+02</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>54.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>447.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1147.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000e+03</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>105.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>447.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1632.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.000000e+03</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>145.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>447.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2725.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>2.086921e+07</td>\n",
       "      <td>46531.000000</td>\n",
       "      <td>605.000000</td>\n",
       "      <td>2557.000000</td>\n",
       "      <td>2494.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           user_id      Channel  TotalTransactionAmount      Tx_Count  \\\n",
       "count  2452.000000  2452.000000            2.452000e+03   2452.000000   \n",
       "mean   1275.206770     1.674551            5.540556e+04     90.733687   \n",
       "std     655.443053     1.846882            5.649720e+05   1250.864387   \n",
       "min       3.000000     1.000000            1.000000e+00      1.000000   \n",
       "25%     838.000000     1.000000            2.000000e+02      1.000000   \n",
       "50%    1147.000000     1.000000            1.000000e+03      3.000000   \n",
       "75%    1632.000000     1.000000            5.000000e+03      9.000000   \n",
       "max    2725.000000    10.000000            2.086921e+07  46531.000000   \n",
       "\n",
       "       DaysSinceLastTrans  reseller_id  superdealer_id  \n",
       "count         2452.000000  2452.000000     2452.000000  \n",
       "mean           114.360930   107.151713      396.193312  \n",
       "std             71.197708   376.064464      269.796894  \n",
       "min             30.000000     0.000000        0.000000  \n",
       "25%             54.000000     0.000000      447.000000  \n",
       "50%            105.000000     0.000000      447.000000  \n",
       "75%            145.000000     0.000000      447.000000  \n",
       "max            605.000000  2557.000000     2494.000000  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's describe the data\n",
    "data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "user_id 683\n",
      "[1191 1287 1168 1119 1183  919 1437 1009 1189 1768  922 1130 1285 1188\n",
      " 1180 1572 1176 1273  951 1199]\n",
      "\n",
      "\n",
      "Channel 7\n",
      "[ 8.  1.  2.  6.  5. 10.  4.]\n",
      "\n",
      "\n",
      "DaysSinceLastTrans 276\n",
      "[30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49]\n",
      "\n",
      "\n",
      "reseller_id 10\n",
      "[1130.    0.  553.  910.   56. 1802.  464. 2557.  841. 2379.]\n",
      "\n",
      "\n",
      "superdealer_id 16\n",
      "[  18.  447.  501.  741. 2379.   56.  417.  430.    0. 2494.  384.  466.\n",
      "  172.   40.   86. 1642.]\n",
      "\n",
      "\n",
      "Product_ServiceProvider 13\n",
      "['Jos Electric' 'MTN' 'Airtel' 'Glo' '9mobile' 'DSTV' 'GOTV'\n",
      " 'Ibadan Electric' 'Ikeja Electric' 'Portharcourt Electric' 'Eko Electric'\n",
      " 'Jamb' 'Startimes']\n",
      "\n",
      "\n",
      "Product_Type 7\n",
      "['Postpaid' 'Airtime' 'Data' 'Prepaid' 'Pay TV' 'Voucher Pin' 'E-facility']\n",
      "\n",
      "\n",
      "Product_Category 5\n",
      "['Electricity' 'Telco' 'Cable TV' 'Universal Pin' 'Education']\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Are there any unique values in each column entry in the dataset?\n",
    "for i in data.columns:\n",
    "    if i not in ['TotalTransactionAmount','Tx_Count']:\n",
    "        print(i, len(data[i].unique()))\n",
    "        print(data[i].unique()[:20])\n",
    "        print (\"\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# checking for outliers \n",
    "data.boxplot(figsize=(15, 6), fontsize=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False    2060\n",
       "True      392\n",
       "Name: TotalTransactionAmount, dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's check the ouliers present in the TotalTransactionAmount clearly \n",
    "# as the boxplot is not quite as clear.\n",
    "\n",
    "# Checking for outliers in the TotalTransactionAmount column\n",
    "\n",
    "Q1 = data[\"TotalTransactionAmount\"].quantile(0.25)\n",
    "Q3 = data[\"TotalTransactionAmount\"].quantile(0.75)\n",
    "\n",
    "IQR = Q3 - Q1\n",
    "\n",
    "outliers = ((data[\"TotalTransactionAmount\"] < Q1 - 1.5 * IQR) | (data[\"TotalTransactionAmount\"] > Q3 + 1.5 * IQR))\n",
    "outliers.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Product_ServiceProvider</th>\n",
       "      <th>TotalTransactionAmount</th>\n",
       "      <th>Tx_Count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Product_ServiceProvider</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>9mobile</th>\n",
       "      <td>354</td>\n",
       "      <td>6880980</td>\n",
       "      <td>14915</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Airtel</th>\n",
       "      <td>700</td>\n",
       "      <td>25826487</td>\n",
       "      <td>52628</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DSTV</th>\n",
       "      <td>12</td>\n",
       "      <td>978685</td>\n",
       "      <td>63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Eko Electric</th>\n",
       "      <td>33</td>\n",
       "      <td>12238240</td>\n",
       "      <td>328</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GOTV</th>\n",
       "      <td>9</td>\n",
       "      <td>94740</td>\n",
       "      <td>56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Glo</th>\n",
       "      <td>421</td>\n",
       "      <td>8721806</td>\n",
       "      <td>21182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ibadan Electric</th>\n",
       "      <td>13</td>\n",
       "      <td>503973</td>\n",
       "      <td>280</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ikeja Electric</th>\n",
       "      <td>18</td>\n",
       "      <td>929501</td>\n",
       "      <td>203</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Jamb</th>\n",
       "      <td>42</td>\n",
       "      <td>19046753</td>\n",
       "      <td>4824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Jos Electric</th>\n",
       "      <td>32</td>\n",
       "      <td>3706721</td>\n",
       "      <td>1653</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MTN</th>\n",
       "      <td>813</td>\n",
       "      <td>56573750</td>\n",
       "      <td>126170</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Portharcourt Electric</th>\n",
       "      <td>3</td>\n",
       "      <td>343500</td>\n",
       "      <td>174</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Startimes</th>\n",
       "      <td>2</td>\n",
       "      <td>9300</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         Product_ServiceProvider  TotalTransactionAmount  \\\n",
       "Product_ServiceProvider                                                    \n",
       "9mobile                                      354                 6880980   \n",
       "Airtel                                       700                25826487   \n",
       "DSTV                                          12                  978685   \n",
       "Eko Electric                                  33                12238240   \n",
       "GOTV                                           9                   94740   \n",
       "Glo                                          421                 8721806   \n",
       "Ibadan Electric                               13                  503973   \n",
       "Ikeja Electric                                18                  929501   \n",
       "Jamb                                          42                19046753   \n",
       "Jos Electric                                  32                 3706721   \n",
       "MTN                                          813                56573750   \n",
       "Portharcourt Electric                          3                  343500   \n",
       "Startimes                                      2                    9300   \n",
       "\n",
       "                         Tx_Count  \n",
       "Product_ServiceProvider            \n",
       "9mobile                     14915  \n",
       "Airtel                      52628  \n",
       "DSTV                           63  \n",
       "Eko Electric                  328  \n",
       "GOTV                           56  \n",
       "Glo                         21182  \n",
       "Ibadan Electric               280  \n",
       "Ikeja Electric                203  \n",
       "Jamb                         4824  \n",
       "Jos Electric                 1653  \n",
       "MTN                        126170  \n",
       "Portharcourt Electric         174  \n",
       "Startimes                       3  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#GROUPING OF Product_ServiceProvider\n",
    "Product_ServiceProvider  = pd.DataFrame(data.groupby('Product_ServiceProvider').agg({'Product_ServiceProvider':'count',\n",
    "                                                                                       'TotalTransactionAmount':'sum', \n",
    "                                                                                        'Tx_Count':'sum'}))\n",
    "Product_ServiceProvider                                                                                       "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Product_Category</th>\n",
       "      <th>TotalTransactionAmount</th>\n",
       "      <th>Tx_Count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Product_Category</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Cable TV</th>\n",
       "      <td>23</td>\n",
       "      <td>1082725</td>\n",
       "      <td>122</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Education</th>\n",
       "      <td>42</td>\n",
       "      <td>19046753</td>\n",
       "      <td>4824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Electricity</th>\n",
       "      <td>99</td>\n",
       "      <td>17721935</td>\n",
       "      <td>2638</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Telco</th>\n",
       "      <td>2274</td>\n",
       "      <td>94643272</td>\n",
       "      <td>179426</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Universal Pin</th>\n",
       "      <td>14</td>\n",
       "      <td>3359751</td>\n",
       "      <td>35469</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  Product_Category  TotalTransactionAmount  Tx_Count\n",
       "Product_Category                                                    \n",
       "Cable TV                        23                 1082725       122\n",
       "Education                       42                19046753      4824\n",
       "Electricity                     99                17721935      2638\n",
       "Telco                         2274                94643272    179426\n",
       "Universal Pin                   14                 3359751     35469"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#GROUPING OFProduct_Category\n",
    "Product_Category  = pd.DataFrame(data.groupby('Product_Category').agg({'Product_Category':'count',\n",
    "                                                                                       'TotalTransactionAmount':'sum', \n",
    "                                                                                        'Tx_Count':'sum'}))\n",
    "Product_Category "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Product_Type</th>\n",
       "      <th>TotalTransactionAmount</th>\n",
       "      <th>Tx_Count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Product_Type</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Airtime</th>\n",
       "      <td>1876</td>\n",
       "      <td>85016497</td>\n",
       "      <td>164996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Data</th>\n",
       "      <td>398</td>\n",
       "      <td>9626775</td>\n",
       "      <td>14430</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>E-facility</th>\n",
       "      <td>42</td>\n",
       "      <td>19046753</td>\n",
       "      <td>4824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pay TV</th>\n",
       "      <td>23</td>\n",
       "      <td>1082725</td>\n",
       "      <td>122</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Postpaid</th>\n",
       "      <td>28</td>\n",
       "      <td>12532751</td>\n",
       "      <td>504</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Prepaid</th>\n",
       "      <td>71</td>\n",
       "      <td>5189184</td>\n",
       "      <td>2134</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Voucher Pin</th>\n",
       "      <td>14</td>\n",
       "      <td>3359751</td>\n",
       "      <td>35469</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Product_Type  TotalTransactionAmount  Tx_Count\n",
       "Product_Type                                                \n",
       "Airtime               1876                85016497    164996\n",
       "Data                   398                 9626775     14430\n",
       "E-facility              42                19046753      4824\n",
       "Pay TV                  23                 1082725       122\n",
       "Postpaid                28                12532751       504\n",
       "Prepaid                 71                 5189184      2134\n",
       "Voucher Pin             14                 3359751     35469"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#GROUPING OF Product_Type\n",
    "Product_Type  = pd.DataFrame(data.groupby('Product_Type').agg({'Product_Type':'count',\n",
    "                                                                'TotalTransactionAmount':'sum', \n",
    "                                                                'Tx_Count':'sum'}))\n",
    "Product_Type "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DaysSinceLastTrans</th>\n",
       "      <th>reseller_id</th>\n",
       "      <th>superdealer_id</th>\n",
       "      <th>TotalTransactionAmount</th>\n",
       "      <th>Tx_Count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>351</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>100</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>231</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>51</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>35</td>\n",
       "      <td>0.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>27338</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>605</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>100</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>132</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7800</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2682</th>\n",
       "      <td>30</td>\n",
       "      <td>2557.0</td>\n",
       "      <td>501.0</td>\n",
       "      <td>10050</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2684</th>\n",
       "      <td>39</td>\n",
       "      <td>464.0</td>\n",
       "      <td>501.0</td>\n",
       "      <td>1200</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2690</th>\n",
       "      <td>32</td>\n",
       "      <td>464.0</td>\n",
       "      <td>501.0</td>\n",
       "      <td>1400</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2694</th>\n",
       "      <td>35</td>\n",
       "      <td>464.0</td>\n",
       "      <td>501.0</td>\n",
       "      <td>300</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2725</th>\n",
       "      <td>30</td>\n",
       "      <td>1802.0</td>\n",
       "      <td>447.0</td>\n",
       "      <td>200</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>683 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         DaysSinceLastTrans  reseller_id  superdealer_id  \\\n",
       "user_id                                                    \n",
       "3                       351          0.0             0.0   \n",
       "14                      231          0.0             0.0   \n",
       "18                       35          0.0            18.0   \n",
       "19                      605          0.0             0.0   \n",
       "32                      132          0.0             0.0   \n",
       "...                     ...          ...             ...   \n",
       "2682                     30       2557.0           501.0   \n",
       "2684                     39        464.0           501.0   \n",
       "2690                     32        464.0           501.0   \n",
       "2694                     35        464.0           501.0   \n",
       "2725                     30       1802.0           447.0   \n",
       "\n",
       "         TotalTransactionAmount  Tx_Count  \n",
       "user_id                                    \n",
       "3                           100         1  \n",
       "14                           51         2  \n",
       "18                        27338        70  \n",
       "19                          100         1  \n",
       "32                         7800         2  \n",
       "...                         ...       ...  \n",
       "2682                      10050        40  \n",
       "2684                       1200         2  \n",
       "2690                       1400         3  \n",
       "2694                        300         1  \n",
       "2725                        200         1  \n",
       "\n",
       "[683 rows x 5 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#uNIQUE ID GROUPBY\n",
    "user_id  = pd.DataFrame(data.groupby('user_id').agg({'DaysSinceLastTrans':'min','reseller_id':'max','superdealer_id':'max',\n",
    "                                                                'TotalTransactionAmount':'sum', \n",
    "                                                                'Tx_Count':'sum'}))\n",
    "user_id "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>683 distinct customers</br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>superdealer_id</th>\n",
       "      <th>TotalTransactionAmount</th>\n",
       "      <th>Tx_Count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>superdealer_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0.0</th>\n",
       "      <td>91</td>\n",
       "      <td>3529227</td>\n",
       "      <td>962</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18.0</th>\n",
       "      <td>332</td>\n",
       "      <td>31532455</td>\n",
       "      <td>11495</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40.0</th>\n",
       "      <td>12</td>\n",
       "      <td>15647983</td>\n",
       "      <td>48069</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56.0</th>\n",
       "      <td>6</td>\n",
       "      <td>11300</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>86.0</th>\n",
       "      <td>33</td>\n",
       "      <td>49515383</td>\n",
       "      <td>101313</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>172.0</th>\n",
       "      <td>23</td>\n",
       "      <td>3630798</td>\n",
       "      <td>3410</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>384.0</th>\n",
       "      <td>5</td>\n",
       "      <td>28075</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>417.0</th>\n",
       "      <td>28</td>\n",
       "      <td>1537950</td>\n",
       "      <td>244</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>430.0</th>\n",
       "      <td>13</td>\n",
       "      <td>7175</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>447.0</th>\n",
       "      <td>1440</td>\n",
       "      <td>5984706</td>\n",
       "      <td>14207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>466.0</th>\n",
       "      <td>1</td>\n",
       "      <td>1000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>501.0</th>\n",
       "      <td>386</td>\n",
       "      <td>20812975</td>\n",
       "      <td>6464</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>741.0</th>\n",
       "      <td>55</td>\n",
       "      <td>178948</td>\n",
       "      <td>673</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1642.0</th>\n",
       "      <td>8</td>\n",
       "      <td>3357950</td>\n",
       "      <td>35450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2379.0</th>\n",
       "      <td>1</td>\n",
       "      <td>21171</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2494.0</th>\n",
       "      <td>18</td>\n",
       "      <td>57340</td>\n",
       "      <td>133</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                superdealer_id  TotalTransactionAmount  Tx_Count\n",
       "superdealer_id                                                  \n",
       "0.0                         91                 3529227       962\n",
       "18.0                       332                31532455     11495\n",
       "40.0                        12                15647983     48069\n",
       "56.0                         6                   11300         7\n",
       "86.0                        33                49515383    101313\n",
       "172.0                       23                 3630798      3410\n",
       "384.0                        5                   28075        13\n",
       "417.0                       28                 1537950       244\n",
       "430.0                       13                    7175        28\n",
       "447.0                     1440                 5984706     14207\n",
       "466.0                        1                    1000         1\n",
       "501.0                      386                20812975      6464\n",
       "741.0                       55                  178948       673\n",
       "1642.0                       8                 3357950     35450\n",
       "2379.0                       1                   21171        10\n",
       "2494.0                      18                   57340       133"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#GROUPING OF superdealer_id\n",
    "superdealer_id  = pd.DataFrame(data.groupby('superdealer_id').agg({'superdealer_id':'count',\n",
    "                                                                'TotalTransactionAmount':'sum', \n",
    "                                                                'Tx_Count':'sum'}))\n",
    "superdealer_id"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>reseller_id</th>\n",
       "      <th>TotalTransactionAmount</th>\n",
       "      <th>Tx_Count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>reseller_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0.0</th>\n",
       "      <td>2230</td>\n",
       "      <td>130970800</td>\n",
       "      <td>217731</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56.0</th>\n",
       "      <td>11</td>\n",
       "      <td>408900</td>\n",
       "      <td>77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>464.0</th>\n",
       "      <td>9</td>\n",
       "      <td>5700</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>553.0</th>\n",
       "      <td>16</td>\n",
       "      <td>198724</td>\n",
       "      <td>244</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>841.0</th>\n",
       "      <td>1</td>\n",
       "      <td>150</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>910.0</th>\n",
       "      <td>3</td>\n",
       "      <td>1400</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1130.0</th>\n",
       "      <td>139</td>\n",
       "      <td>4042922</td>\n",
       "      <td>3948</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1802.0</th>\n",
       "      <td>28</td>\n",
       "      <td>93140</td>\n",
       "      <td>309</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2379.0</th>\n",
       "      <td>2</td>\n",
       "      <td>81300</td>\n",
       "      <td>63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2557.0</th>\n",
       "      <td>13</td>\n",
       "      <td>51400</td>\n",
       "      <td>73</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             reseller_id  TotalTransactionAmount  Tx_Count\n",
       "reseller_id                                               \n",
       "0.0                 2230               130970800    217731\n",
       "56.0                  11                  408900        77\n",
       "464.0                  9                    5700        18\n",
       "553.0                 16                  198724       244\n",
       "841.0                  1                     150         2\n",
       "910.0                  3                    1400        14\n",
       "1130.0               139                 4042922      3948\n",
       "1802.0                28                   93140       309\n",
       "2379.0                 2                   81300        63\n",
       "2557.0                13                   51400        73"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#GROUPING OF reseller_id\n",
    "reseller_id  = pd.DataFrame(data.groupby('reseller_id').agg({'reseller_id':'count',\n",
    "                                                                'TotalTransactionAmount':'sum', \n",
    "                                                                'Tx_Count':'sum'}))\n",
    "reseller_id"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>TotalTransactionAmount</th>\n",
       "      <th>Tx_Count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Product_Category</th>\n",
       "      <th>Product_Type</th>\n",
       "      <th>Product_ServiceProvider</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">Cable TV</th>\n",
       "      <th rowspan=\"3\" valign=\"top\">Pay TV</th>\n",
       "      <th>DSTV</th>\n",
       "      <td>12</td>\n",
       "      <td>978685</td>\n",
       "      <td>63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GOTV</th>\n",
       "      <td>9</td>\n",
       "      <td>94740</td>\n",
       "      <td>56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Startimes</th>\n",
       "      <td>2</td>\n",
       "      <td>9300</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Education</th>\n",
       "      <th>E-facility</th>\n",
       "      <th>Jamb</th>\n",
       "      <td>42</td>\n",
       "      <td>19046753</td>\n",
       "      <td>4824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"10\" valign=\"top\">Electricity</th>\n",
       "      <th rowspan=\"5\" valign=\"top\">Postpaid</th>\n",
       "      <th>Eko Electric</th>\n",
       "      <td>13</td>\n",
       "      <td>10550140</td>\n",
       "      <td>139</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ibadan Electric</th>\n",
       "      <td>2</td>\n",
       "      <td>164400</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ikeja Electric</th>\n",
       "      <td>7</td>\n",
       "      <td>618811</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Jos Electric</th>\n",
       "      <td>5</td>\n",
       "      <td>1188300</td>\n",
       "      <td>290</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Portharcourt Electric</th>\n",
       "      <td>1</td>\n",
       "      <td>11100</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">Prepaid</th>\n",
       "      <th>Eko Electric</th>\n",
       "      <td>20</td>\n",
       "      <td>1688100</td>\n",
       "      <td>189</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ibadan Electric</th>\n",
       "      <td>11</td>\n",
       "      <td>339573</td>\n",
       "      <td>252</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ikeja Electric</th>\n",
       "      <td>11</td>\n",
       "      <td>310690</td>\n",
       "      <td>158</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Jos Electric</th>\n",
       "      <td>27</td>\n",
       "      <td>2518421</td>\n",
       "      <td>1363</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Portharcourt Electric</th>\n",
       "      <td>2</td>\n",
       "      <td>332400</td>\n",
       "      <td>172</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"8\" valign=\"top\">Telco</th>\n",
       "      <th rowspan=\"4\" valign=\"top\">Airtime</th>\n",
       "      <th>9mobile</th>\n",
       "      <td>290</td>\n",
       "      <td>5728780</td>\n",
       "      <td>10992</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Airtel</th>\n",
       "      <td>594</td>\n",
       "      <td>22429037</td>\n",
       "      <td>39240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Glo</th>\n",
       "      <td>359</td>\n",
       "      <td>7478131</td>\n",
       "      <td>17238</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MTN</th>\n",
       "      <td>633</td>\n",
       "      <td>49380549</td>\n",
       "      <td>97526</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">Data</th>\n",
       "      <th>9mobile</th>\n",
       "      <td>61</td>\n",
       "      <td>959200</td>\n",
       "      <td>1835</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Airtel</th>\n",
       "      <td>102</td>\n",
       "      <td>2427600</td>\n",
       "      <td>3239</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Glo</th>\n",
       "      <td>59</td>\n",
       "      <td>1049575</td>\n",
       "      <td>1917</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MTN</th>\n",
       "      <td>176</td>\n",
       "      <td>5190400</td>\n",
       "      <td>7439</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">Universal Pin</th>\n",
       "      <th rowspan=\"4\" valign=\"top\">Voucher Pin</th>\n",
       "      <th>9mobile</th>\n",
       "      <td>3</td>\n",
       "      <td>193000</td>\n",
       "      <td>2088</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Airtel</th>\n",
       "      <td>4</td>\n",
       "      <td>969850</td>\n",
       "      <td>10149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Glo</th>\n",
       "      <td>3</td>\n",
       "      <td>194100</td>\n",
       "      <td>2027</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MTN</th>\n",
       "      <td>4</td>\n",
       "      <td>2002801</td>\n",
       "      <td>21205</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                       user_id  \\\n",
       "Product_Category Product_Type Product_ServiceProvider            \n",
       "Cable TV         Pay TV       DSTV                          12   \n",
       "                              GOTV                           9   \n",
       "                              Startimes                      2   \n",
       "Education        E-facility   Jamb                          42   \n",
       "Electricity      Postpaid     Eko Electric                  13   \n",
       "                              Ibadan Electric                2   \n",
       "                              Ikeja Electric                 7   \n",
       "                              Jos Electric                   5   \n",
       "                              Portharcourt Electric          1   \n",
       "                 Prepaid      Eko Electric                  20   \n",
       "                              Ibadan Electric               11   \n",
       "                              Ikeja Electric                11   \n",
       "                              Jos Electric                  27   \n",
       "                              Portharcourt Electric          2   \n",
       "Telco            Airtime      9mobile                      290   \n",
       "                              Airtel                       594   \n",
       "                              Glo                          359   \n",
       "                              MTN                          633   \n",
       "                 Data         9mobile                       61   \n",
       "                              Airtel                       102   \n",
       "                              Glo                           59   \n",
       "                              MTN                          176   \n",
       "Universal Pin    Voucher Pin  9mobile                        3   \n",
       "                              Airtel                         4   \n",
       "                              Glo                            3   \n",
       "                              MTN                            4   \n",
       "\n",
       "                                                       TotalTransactionAmount  \\\n",
       "Product_Category Product_Type Product_ServiceProvider                           \n",
       "Cable TV         Pay TV       DSTV                                     978685   \n",
       "                              GOTV                                      94740   \n",
       "                              Startimes                                  9300   \n",
       "Education        E-facility   Jamb                                   19046753   \n",
       "Electricity      Postpaid     Eko Electric                           10550140   \n",
       "                              Ibadan Electric                          164400   \n",
       "                              Ikeja Electric                           618811   \n",
       "                              Jos Electric                            1188300   \n",
       "                              Portharcourt Electric                     11100   \n",
       "                 Prepaid      Eko Electric                            1688100   \n",
       "                              Ibadan Electric                          339573   \n",
       "                              Ikeja Electric                           310690   \n",
       "                              Jos Electric                            2518421   \n",
       "                              Portharcourt Electric                    332400   \n",
       "Telco            Airtime      9mobile                                 5728780   \n",
       "                              Airtel                                 22429037   \n",
       "                              Glo                                     7478131   \n",
       "                              MTN                                    49380549   \n",
       "                 Data         9mobile                                  959200   \n",
       "                              Airtel                                  2427600   \n",
       "                              Glo                                     1049575   \n",
       "                              MTN                                     5190400   \n",
       "Universal Pin    Voucher Pin  9mobile                                  193000   \n",
       "                              Airtel                                   969850   \n",
       "                              Glo                                      194100   \n",
       "                              MTN                                     2002801   \n",
       "\n",
       "                                                       Tx_Count  \n",
       "Product_Category Product_Type Product_ServiceProvider            \n",
       "Cable TV         Pay TV       DSTV                           63  \n",
       "                              GOTV                           56  \n",
       "                              Startimes                       3  \n",
       "Education        E-facility   Jamb                         4824  \n",
       "Electricity      Postpaid     Eko Electric                  139  \n",
       "                              Ibadan Electric                28  \n",
       "                              Ikeja Electric                 45  \n",
       "                              Jos Electric                  290  \n",
       "                              Portharcourt Electric           2  \n",
       "                 Prepaid      Eko Electric                  189  \n",
       "                              Ibadan Electric               252  \n",
       "                              Ikeja Electric                158  \n",
       "                              Jos Electric                 1363  \n",
       "                              Portharcourt Electric         172  \n",
       "Telco            Airtime      9mobile                     10992  \n",
       "                              Airtel                      39240  \n",
       "                              Glo                         17238  \n",
       "                              MTN                         97526  \n",
       "                 Data         9mobile                      1835  \n",
       "                              Airtel                       3239  \n",
       "                              Glo                          1917  \n",
       "                              MTN                          7439  \n",
       "Universal Pin    Voucher Pin  9mobile                      2088  \n",
       "                              Airtel                      10149  \n",
       "                              Glo                          2027  \n",
       "                              MTN                         21205  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combine  = pd.DataFrame(data.groupby(['Product_Category','Product_Type','Product_ServiceProvider']).agg({'user_id':'count',\n",
    "                                                                'TotalTransactionAmount':'sum', \n",
    "                                                                'Tx_Count':'sum'}))\n",
    "combine"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_id</th>\n",
       "      <th>Product_Category</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <th>Telco</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <th>Telco</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"3\" valign=\"top\">18</th>\n",
       "      <th>Cable TV</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Electricity</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Telco</th>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2682</th>\n",
       "      <th>Telco</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2684</th>\n",
       "      <th>Telco</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2690</th>\n",
       "      <th>Telco</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2694</th>\n",
       "      <th>Telco</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2725</th>\n",
       "      <th>Telco</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>777 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                          user_id\n",
       "user_id Product_Category         \n",
       "3       Telco                   1\n",
       "14      Telco                   1\n",
       "18      Cable TV                1\n",
       "        Electricity             2\n",
       "        Telco                   9\n",
       "...                           ...\n",
       "2682    Telco                   5\n",
       "2684    Telco                   2\n",
       "2690    Telco                   1\n",
       "2694    Telco                   1\n",
       "2725    Telco                   1\n",
       "\n",
       "[777 rows x 1 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#uNIQUE ID GROUPBY\n",
    "user  = pd.DataFrame(data.groupby(['user_id','Product_Category']).agg({'user_id':'count'}))\n",
    "\n",
    "user"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "user2 = user.unstack()['user_id']\n",
    "user2.fillna(0,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Product_Category</th>\n",
       "      <th>Cable TV</th>\n",
       "      <th>Education</th>\n",
       "      <th>Electricity</th>\n",
       "      <th>Telco</th>\n",
       "      <th>Universal Pin</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2682</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2684</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2690</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2694</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2725</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>683 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "Product_Category  Cable TV  Education  Electricity  Telco  Universal Pin\n",
       "user_id                                                                 \n",
       "3                      0.0        0.0          0.0    1.0            0.0\n",
       "14                     0.0        0.0          0.0    1.0            0.0\n",
       "18                     1.0        0.0          2.0    9.0            0.0\n",
       "19                     0.0        0.0          0.0    1.0            0.0\n",
       "32                     0.0        0.0          0.0    2.0            0.0\n",
       "...                    ...        ...          ...    ...            ...\n",
       "2682                   0.0        0.0          0.0    5.0            0.0\n",
       "2684                   0.0        0.0          0.0    2.0            0.0\n",
       "2690                   0.0        0.0          0.0    1.0            0.0\n",
       "2694                   0.0        0.0          0.0    1.0            0.0\n",
       "2725                   0.0        0.0          0.0    1.0            0.0\n",
       "\n",
       "[683 rows x 5 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "user2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "result = pd.concat([user_id,user2], axis=1, join='inner')\n",
    "result.reset_index(inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## K-Means clustering with Customer Segmentation Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>DaysSinceLastTrans</th>\n",
       "      <th>reseller_id</th>\n",
       "      <th>superdealer_id</th>\n",
       "      <th>TotalTransactionAmount</th>\n",
       "      <th>Tx_Count</th>\n",
       "      <th>Cable TV</th>\n",
       "      <th>Education</th>\n",
       "      <th>Electricity</th>\n",
       "      <th>Telco</th>\n",
       "      <th>Universal Pin</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>351</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>100</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>14</td>\n",
       "      <td>231</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>51</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>18</td>\n",
       "      <td>35</td>\n",
       "      <td>0.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>27338</td>\n",
       "      <td>70</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>19</td>\n",
       "      <td>605</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>100</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>32</td>\n",
       "      <td>132</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7800</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>678</th>\n",
       "      <td>2682</td>\n",
       "      <td>30</td>\n",
       "      <td>2557.0</td>\n",
       "      <td>501.0</td>\n",
       "      <td>10050</td>\n",
       "      <td>40</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>679</th>\n",
       "      <td>2684</td>\n",
       "      <td>39</td>\n",
       "      <td>464.0</td>\n",
       "      <td>501.0</td>\n",
       "      <td>1200</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>680</th>\n",
       "      <td>2690</td>\n",
       "      <td>32</td>\n",
       "      <td>464.0</td>\n",
       "      <td>501.0</td>\n",
       "      <td>1400</td>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>681</th>\n",
       "      <td>2694</td>\n",
       "      <td>35</td>\n",
       "      <td>464.0</td>\n",
       "      <td>501.0</td>\n",
       "      <td>300</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>682</th>\n",
       "      <td>2725</td>\n",
       "      <td>30</td>\n",
       "      <td>1802.0</td>\n",
       "      <td>447.0</td>\n",
       "      <td>200</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>683 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     user_id  DaysSinceLastTrans  reseller_id  superdealer_id  \\\n",
       "0          3                 351          0.0             0.0   \n",
       "1         14                 231          0.0             0.0   \n",
       "2         18                  35          0.0            18.0   \n",
       "3         19                 605          0.0             0.0   \n",
       "4         32                 132          0.0             0.0   \n",
       "..       ...                 ...          ...             ...   \n",
       "678     2682                  30       2557.0           501.0   \n",
       "679     2684                  39        464.0           501.0   \n",
       "680     2690                  32        464.0           501.0   \n",
       "681     2694                  35        464.0           501.0   \n",
       "682     2725                  30       1802.0           447.0   \n",
       "\n",
       "     TotalTransactionAmount  Tx_Count  Cable TV  Education  Electricity  \\\n",
       "0                       100         1       0.0        0.0          0.0   \n",
       "1                        51         2       0.0        0.0          0.0   \n",
       "2                     27338        70       1.0        0.0          2.0   \n",
       "3                       100         1       0.0        0.0          0.0   \n",
       "4                      7800         2       0.0        0.0          0.0   \n",
       "..                      ...       ...       ...        ...          ...   \n",
       "678                   10050        40       0.0        0.0          0.0   \n",
       "679                    1200         2       0.0        0.0          0.0   \n",
       "680                    1400         3       0.0        0.0          0.0   \n",
       "681                     300         1       0.0        0.0          0.0   \n",
       "682                     200         1       0.0        0.0          0.0   \n",
       "\n",
       "     Telco  Universal Pin  \n",
       "0      1.0            0.0  \n",
       "1      1.0            0.0  \n",
       "2      9.0            0.0  \n",
       "3      1.0            0.0  \n",
       "4      2.0            0.0  \n",
       "..     ...            ...  \n",
       "678    5.0            0.0  \n",
       "679    2.0            0.0  \n",
       "680    1.0            0.0  \n",
       "681    1.0            0.0  \n",
       "682    1.0            0.0  \n",
       "\n",
       "[683 rows x 11 columns]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "def reseller(row):\n",
    "    if row['reseller_id'] > 0 :\n",
    "        return 1\n",
    "    else:\n",
    "        return 0  \n",
    "\n",
    "def superdealer_id(row):\n",
    "    if row['superdealer_id'] > 0:\n",
    "        return 1\n",
    "    else:\n",
    "        return 0\n",
    "    \n",
    "def superdealer(row):\n",
    "    if row['superdealer_id'] == row['user_id']:\n",
    "        return 1\n",
    "    else:\n",
    "        return 0\n",
    "    \n",
    "def check(row,column):\n",
    "    if row[column] == 0:\n",
    "        return 0\n",
    "    else:\n",
    "        return 1\n",
    "             \n",
    "\n",
    "result['used_reseller'] = result.apply(lambda row: reseller(row), axis=1)\n",
    "result['used_superdealer'] = result.apply(lambda row: superdealer_id(row), axis=1)\n",
    "result['superdealer'] = result.apply(lambda row: superdealer(row), axis=1)\n",
    "result['Cable TV_'] = result.apply(lambda row: check(row,'Cable TV'), axis=1)\n",
    "result['Education_'] = result.apply(lambda row: check(row,'Education'), axis=1)\n",
    "result['Electricity_'] = result.apply(lambda row: check(row,'Electricity'), axis=1)\n",
    "result['Telco_'] = result.apply(lambda row: check(row,'Telco'), axis=1)\n",
    "result['Universal Pin_'] = result.apply(lambda row: check(row,'Universal Pin'), axis=1)\n",
    "\n",
    "result['services'] = result['Cable TV_'] + result['Education_'] + result['Electricity_'] + result['Telco_'] + result['Universal Pin_']\n",
    "result.drop(['Education_','Cable TV_','Telco_','Electricity_','Universal Pin_'],axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>DaysSinceLastTrans</th>\n",
       "      <th>reseller_id</th>\n",
       "      <th>superdealer_id</th>\n",
       "      <th>TotalTransactionAmount</th>\n",
       "      <th>Tx_Count</th>\n",
       "      <th>Cable TV</th>\n",
       "      <th>Education</th>\n",
       "      <th>Electricity</th>\n",
       "      <th>Telco</th>\n",
       "      <th>Universal Pin</th>\n",
       "      <th>used_reseller</th>\n",
       "      <th>used_superdealer</th>\n",
       "      <th>superdealer</th>\n",
       "      <th>services</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>86</td>\n",
       "      <td>30</td>\n",
       "      <td>0.0</td>\n",
       "      <td>86.0</td>\n",
       "      <td>49515383</td>\n",
       "      <td>101313</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    user_id  DaysSinceLastTrans  reseller_id  superdealer_id  \\\n",
       "11       86                  30          0.0            86.0   \n",
       "\n",
       "    TotalTransactionAmount  Tx_Count  Cable TV  Education  Electricity  Telco  \\\n",
       "11                49515383    101313       0.0        0.0         10.0   23.0   \n",
       "\n",
       "    Universal Pin  used_reseller  used_superdealer  superdealer  services  \n",
       "11            0.0              0                 1            1         2  "
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result[result['Tx_Count'] == 101313 ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "result.drop(11,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>DaysSinceLastTrans</th>\n",
       "      <th>reseller_id</th>\n",
       "      <th>superdealer_id</th>\n",
       "      <th>TotalTransactionAmount</th>\n",
       "      <th>Tx_Count</th>\n",
       "      <th>Cable TV</th>\n",
       "      <th>Education</th>\n",
       "      <th>Electricity</th>\n",
       "      <th>Telco</th>\n",
       "      <th>Universal Pin</th>\n",
       "      <th>used_reseller</th>\n",
       "      <th>used_superdealer</th>\n",
       "      <th>superdealer</th>\n",
       "      <th>services</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>351</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>100</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>14</td>\n",
       "      <td>231</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>51</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>18</td>\n",
       "      <td>35</td>\n",
       "      <td>0.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>27338</td>\n",
       "      <td>70</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>19</td>\n",
       "      <td>605</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>100</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>32</td>\n",
       "      <td>132</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7800</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>678</th>\n",
       "      <td>2682</td>\n",
       "      <td>30</td>\n",
       "      <td>2557.0</td>\n",
       "      <td>501.0</td>\n",
       "      <td>10050</td>\n",
       "      <td>40</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>679</th>\n",
       "      <td>2684</td>\n",
       "      <td>39</td>\n",
       "      <td>464.0</td>\n",
       "      <td>501.0</td>\n",
       "      <td>1200</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>680</th>\n",
       "      <td>2690</td>\n",
       "      <td>32</td>\n",
       "      <td>464.0</td>\n",
       "      <td>501.0</td>\n",
       "      <td>1400</td>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>681</th>\n",
       "      <td>2694</td>\n",
       "      <td>35</td>\n",
       "      <td>464.0</td>\n",
       "      <td>501.0</td>\n",
       "      <td>300</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>682</th>\n",
       "      <td>2725</td>\n",
       "      <td>30</td>\n",
       "      <td>1802.0</td>\n",
       "      <td>447.0</td>\n",
       "      <td>200</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>682 rows × 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     user_id  DaysSinceLastTrans  reseller_id  superdealer_id  \\\n",
       "0          3                 351          0.0             0.0   \n",
       "1         14                 231          0.0             0.0   \n",
       "2         18                  35          0.0            18.0   \n",
       "3         19                 605          0.0             0.0   \n",
       "4         32                 132          0.0             0.0   \n",
       "..       ...                 ...          ...             ...   \n",
       "678     2682                  30       2557.0           501.0   \n",
       "679     2684                  39        464.0           501.0   \n",
       "680     2690                  32        464.0           501.0   \n",
       "681     2694                  35        464.0           501.0   \n",
       "682     2725                  30       1802.0           447.0   \n",
       "\n",
       "     TotalTransactionAmount  Tx_Count  Cable TV  Education  Electricity  \\\n",
       "0                       100         1       0.0        0.0          0.0   \n",
       "1                        51         2       0.0        0.0          0.0   \n",
       "2                     27338        70       1.0        0.0          2.0   \n",
       "3                       100         1       0.0        0.0          0.0   \n",
       "4                      7800         2       0.0        0.0          0.0   \n",
       "..                      ...       ...       ...        ...          ...   \n",
       "678                   10050        40       0.0        0.0          0.0   \n",
       "679                    1200         2       0.0        0.0          0.0   \n",
       "680                    1400         3       0.0        0.0          0.0   \n",
       "681                     300         1       0.0        0.0          0.0   \n",
       "682                     200         1       0.0        0.0          0.0   \n",
       "\n",
       "     Telco  Universal Pin  used_reseller  used_superdealer  superdealer  \\\n",
       "0      1.0            0.0              0                 0            0   \n",
       "1      1.0            0.0              0                 0            0   \n",
       "2      9.0            0.0              0                 1            1   \n",
       "3      1.0            0.0              0                 0            0   \n",
       "4      2.0            0.0              0                 0            0   \n",
       "..     ...            ...            ...               ...          ...   \n",
       "678    5.0            0.0              1                 1            0   \n",
       "679    2.0            0.0              1                 1            0   \n",
       "680    1.0            0.0              1                 1            0   \n",
       "681    1.0            0.0              1                 1            0   \n",
       "682    1.0            0.0              1                 1            0   \n",
       "\n",
       "     services  \n",
       "0           1  \n",
       "1           1  \n",
       "2           3  \n",
       "3           1  \n",
       "4           1  \n",
       "..        ...  \n",
       "678         1  \n",
       "679         1  \n",
       "680         1  \n",
       "681         1  \n",
       "682         1  \n",
       "\n",
       "[682 rows x 15 columns]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "cluster_data_full = result.copy()\n",
    "cluster_data = cluster_data_full.drop(['user_id','Education',\n",
    "                            'Cable TV','Telco','Electricity','Universal Pin',\n",
    "                           'reseller_id','superdealer_id','used_reseller','used_superdealer','superdealer','services'],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DaysSinceLastTrans</th>\n",
       "      <th>TotalTransactionAmount</th>\n",
       "      <th>Tx_Count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>351</td>\n",
       "      <td>100</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>231</td>\n",
       "      <td>51</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>35</td>\n",
       "      <td>27338</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>605</td>\n",
       "      <td>100</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>132</td>\n",
       "      <td>7800</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>678</th>\n",
       "      <td>30</td>\n",
       "      <td>10050</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>679</th>\n",
       "      <td>39</td>\n",
       "      <td>1200</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>680</th>\n",
       "      <td>32</td>\n",
       "      <td>1400</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>681</th>\n",
       "      <td>35</td>\n",
       "      <td>300</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>682</th>\n",
       "      <td>30</td>\n",
       "      <td>200</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>682 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     DaysSinceLastTrans  TotalTransactionAmount  Tx_Count\n",
       "0                   351                     100         1\n",
       "1                   231                      51         2\n",
       "2                    35                   27338        70\n",
       "3                   605                     100         1\n",
       "4                   132                    7800         2\n",
       "..                  ...                     ...       ...\n",
       "678                  30                   10050        40\n",
       "679                  39                    1200         2\n",
       "680                  32                    1400         3\n",
       "681                  35                     300         1\n",
       "682                  30                     200         1\n",
       "\n",
       "[682 rows x 3 columns]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cluster_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DaysSinceLastTrans</th>\n",
       "      <th>TotalTransactionAmount</th>\n",
       "      <th>Tx_Count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>DaysSinceLastTrans</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.039836</td>\n",
       "      <td>-0.066729</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TotalTransactionAmount</th>\n",
       "      <td>-0.039836</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.697227</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Tx_Count</th>\n",
       "      <td>-0.066729</td>\n",
       "      <td>0.697227</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        DaysSinceLastTrans  TotalTransactionAmount  Tx_Count\n",
       "DaysSinceLastTrans                1.000000               -0.039836 -0.066729\n",
       "TotalTransactionAmount           -0.039836                1.000000  0.697227\n",
       "Tx_Count                         -0.066729                0.697227  1.000000"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#checking thier correlation\n",
    "cluster_data.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\OLAMIDE\\lib\\site-packages\\seaborn\\distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Count')"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Distribution transactionamount\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.set(style = 'whitegrid')\n",
    "sns.distplot(cluster_data['TotalTransactionAmount'])\n",
    "plt.title('Distribution of TotalTransactionAmount', fontsize = 20)\n",
    "plt.xlabel('Range of TotalTransactionAmount')\n",
    "plt.ylabel('Count')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\OLAMIDE\\lib\\site-packages\\seaborn\\distributions.py:2551: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Count')"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Distribution transactionamount\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.set(style = 'whitegrid')\n",
    "sns.distplot(cluster_data['Tx_Count'])\n",
    "plt.title('Distribution of Tx_Count', fontsize = 20)\n",
    "plt.xlabel('Range of Tx_Count')\n",
    "plt.ylabel('Count')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of features before PCA: 3\n",
      "Number of features after PCA: 2\n"
     ]
    }
   ],
   "source": [
    "scaler = StandardScaler()\n",
    "scaled_data = scaler.fit_transform(cluster_data)\n",
    "\n",
    "\n",
    "# reduce dimensionality with PCA\n",
    "print('Number of features before PCA: {}'.format(len(scaled_data[0])))\n",
    "pca = PCA(n_components=2)\n",
    "X_pca = pca.fit_transform(scaled_data)\n",
    "print('Number of features after PCA: {}'.format(len(X_pca[0])))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Now we calculate the Within Cluster Sum of Squared Errors (WSS) for different values of k.\n",
    "wcss = []\n",
    "for k in range(1,11):\n",
    "    kmeans = KMeans(n_clusters=k, init=\"k-means++\")\n",
    "    kmeans.fit(X_pca)\n",
    "    wcss.append(kmeans.inertia_)\n",
    "plt.figure(figsize=(12,6))    \n",
    "plt.plot(range(1,11),wcss, linewidth=2, color=\"red\", marker =\"8\")\n",
    "plt.xlabel(\"K Value\")\n",
    "plt.xticks(np.arange(1,11,1))\n",
    "plt.ylabel(\"WCSS\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "kmeans = KMeans(n_clusters=3, random_state=42)\n",
    "prediction = kmeans.fit_predict(X_pca)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# first PCA component\n",
    "pca1 = [val[0] for val in X_pca]\n",
    "# second PCA component\n",
    "pca2 = [val[1] for val in X_pca]\n",
    "\n",
    "# add the cluster and PCA components to the dataframe\n",
    "cluster_data_full['Cluster'] = prediction\n",
    "cluster_data_full['PCA 1'] = pca1\n",
    "cluster_data_full['PCA 2'] = pca2\n",
    "\n",
    "# plot scatter plot\n",
    "sns.scatterplot(data=cluster_data_full, x='PCA 1', y='PCA 2', hue='Cluster')\n",
    "plt.title('Customer Segmentation With K-Means')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>DaysSinceLastTrans</th>\n",
       "      <th>reseller_id</th>\n",
       "      <th>superdealer_id</th>\n",
       "      <th>TotalTransactionAmount</th>\n",
       "      <th>Tx_Count</th>\n",
       "      <th>Cable TV</th>\n",
       "      <th>Education</th>\n",
       "      <th>Electricity</th>\n",
       "      <th>Telco</th>\n",
       "      <th>Universal Pin</th>\n",
       "      <th>used_reseller</th>\n",
       "      <th>used_superdealer</th>\n",
       "      <th>superdealer</th>\n",
       "      <th>services</th>\n",
       "      <th>Cluster</th>\n",
       "      <th>PCA 1</th>\n",
       "      <th>PCA 2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>351</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>100</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.587103</td>\n",
       "      <td>3.985858</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>14</td>\n",
       "      <td>231</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>51</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.385038</td>\n",
       "      <td>2.098517</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>18</td>\n",
       "      <td>35</td>\n",
       "      <td>0.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>27338</td>\n",
       "      <td>70</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.011956</td>\n",
       "      <td>-0.979474</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>19</td>\n",
       "      <td>605</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>100</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>-1.014243</td>\n",
       "      <td>7.980769</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>32</td>\n",
       "      <td>132</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7800</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.212142</td>\n",
       "      <td>0.542309</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>678</th>\n",
       "      <td>2682</td>\n",
       "      <td>30</td>\n",
       "      <td>2557.0</td>\n",
       "      <td>501.0</td>\n",
       "      <td>10050</td>\n",
       "      <td>40</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.027073</td>\n",
       "      <td>-1.060771</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>679</th>\n",
       "      <td>2684</td>\n",
       "      <td>39</td>\n",
       "      <td>464.0</td>\n",
       "      <td>501.0</td>\n",
       "      <td>1200</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.061209</td>\n",
       "      <td>-0.921130</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>680</th>\n",
       "      <td>2690</td>\n",
       "      <td>32</td>\n",
       "      <td>464.0</td>\n",
       "      <td>501.0</td>\n",
       "      <td>1400</td>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.048965</td>\n",
       "      <td>-1.031179</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>681</th>\n",
       "      <td>2694</td>\n",
       "      <td>35</td>\n",
       "      <td>464.0</td>\n",
       "      <td>501.0</td>\n",
       "      <td>300</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.055535</td>\n",
       "      <td>-0.984166</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>682</th>\n",
       "      <td>2725</td>\n",
       "      <td>30</td>\n",
       "      <td>1802.0</td>\n",
       "      <td>447.0</td>\n",
       "      <td>200</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.047209</td>\n",
       "      <td>-1.062817</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>682 rows × 18 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     user_id  DaysSinceLastTrans  reseller_id  superdealer_id  \\\n",
       "0          3                 351          0.0             0.0   \n",
       "1         14                 231          0.0             0.0   \n",
       "2         18                  35          0.0            18.0   \n",
       "3         19                 605          0.0             0.0   \n",
       "4         32                 132          0.0             0.0   \n",
       "..       ...                 ...          ...             ...   \n",
       "678     2682                  30       2557.0           501.0   \n",
       "679     2684                  39        464.0           501.0   \n",
       "680     2690                  32        464.0           501.0   \n",
       "681     2694                  35        464.0           501.0   \n",
       "682     2725                  30       1802.0           447.0   \n",
       "\n",
       "     TotalTransactionAmount  Tx_Count  Cable TV  Education  Electricity  \\\n",
       "0                       100         1       0.0        0.0          0.0   \n",
       "1                        51         2       0.0        0.0          0.0   \n",
       "2                     27338        70       1.0        0.0          2.0   \n",
       "3                       100         1       0.0        0.0          0.0   \n",
       "4                      7800         2       0.0        0.0          0.0   \n",
       "..                      ...       ...       ...        ...          ...   \n",
       "678                   10050        40       0.0        0.0          0.0   \n",
       "679                    1200         2       0.0        0.0          0.0   \n",
       "680                    1400         3       0.0        0.0          0.0   \n",
       "681                     300         1       0.0        0.0          0.0   \n",
       "682                     200         1       0.0        0.0          0.0   \n",
       "\n",
       "     Telco  Universal Pin  used_reseller  used_superdealer  superdealer  \\\n",
       "0      1.0            0.0              0                 0            0   \n",
       "1      1.0            0.0              0                 0            0   \n",
       "2      9.0            0.0              0                 1            1   \n",
       "3      1.0            0.0              0                 0            0   \n",
       "4      2.0            0.0              0                 0            0   \n",
       "..     ...            ...            ...               ...          ...   \n",
       "678    5.0            0.0              1                 1            0   \n",
       "679    2.0            0.0              1                 1            0   \n",
       "680    1.0            0.0              1                 1            0   \n",
       "681    1.0            0.0              1                 1            0   \n",
       "682    1.0            0.0              1                 1            0   \n",
       "\n",
       "     services  Cluster     PCA 1     PCA 2  \n",
       "0           1        2 -0.587103  3.985858  \n",
       "1           1        2 -0.385038  2.098517  \n",
       "2           3        0 -0.011956 -0.979474  \n",
       "3           1        2 -1.014243  7.980769  \n",
       "4           1        0 -0.212142  0.542309  \n",
       "..        ...      ...       ...       ...  \n",
       "678         1        0 -0.027073 -1.060771  \n",
       "679         1        0 -0.061209 -0.921130  \n",
       "680         1        0 -0.048965 -1.031179  \n",
       "681         1        0 -0.055535 -0.984166  \n",
       "682         1        0 -0.047209 -1.062817  \n",
       "\n",
       "[682 rows x 18 columns]"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cluster_data_full"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>DaysSinceLastTrans</th>\n",
       "      <th>reseller_id</th>\n",
       "      <th>superdealer_id</th>\n",
       "      <th>TotalTransactionAmount</th>\n",
       "      <th>Tx_Count</th>\n",
       "      <th>Cable TV</th>\n",
       "      <th>Education</th>\n",
       "      <th>Electricity</th>\n",
       "      <th>Telco</th>\n",
       "      <th>Universal Pin</th>\n",
       "      <th>used_reseller</th>\n",
       "      <th>used_superdealer</th>\n",
       "      <th>superdealer</th>\n",
       "      <th>services</th>\n",
       "      <th>Cluster</th>\n",
       "      <th>PCA 1</th>\n",
       "      <th>PCA 2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>596.000000</td>\n",
       "      <td>596.00000</td>\n",
       "      <td>596.000000</td>\n",
       "      <td>596.000000</td>\n",
       "      <td>5.960000e+02</td>\n",
       "      <td>596.000000</td>\n",
       "      <td>596.000000</td>\n",
       "      <td>596.000000</td>\n",
       "      <td>596.000000</td>\n",
       "      <td>596.000000</td>\n",
       "      <td>596.000000</td>\n",
       "      <td>596.000000</td>\n",
       "      <td>596.000000</td>\n",
       "      <td>596.000000</td>\n",
       "      <td>596.000000</td>\n",
       "      <td>596.0</td>\n",
       "      <td>596.000000</td>\n",
       "      <td>596.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1678.875839</td>\n",
       "      <td>78.52349</td>\n",
       "      <td>112.177852</td>\n",
       "      <td>428.124161</td>\n",
       "      <td>6.420014e+04</td>\n",
       "      <td>51.011745</td>\n",
       "      <td>0.020134</td>\n",
       "      <td>0.015101</td>\n",
       "      <td>0.100671</td>\n",
       "      <td>3.332215</td>\n",
       "      <td>0.010067</td>\n",
       "      <td>0.087248</td>\n",
       "      <td>0.986577</td>\n",
       "      <td>0.006711</td>\n",
       "      <td>1.100671</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.060482</td>\n",
       "      <td>-0.291293</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>572.614527</td>\n",
       "      <td>34.35227</td>\n",
       "      <td>395.838128</td>\n",
       "      <td>211.884608</td>\n",
       "      <td>4.009832e+05</td>\n",
       "      <td>216.648012</td>\n",
       "      <td>0.162741</td>\n",
       "      <td>0.135126</td>\n",
       "      <td>0.409877</td>\n",
       "      <td>3.367222</td>\n",
       "      <td>0.129249</td>\n",
       "      <td>0.282436</td>\n",
       "      <td>0.115173</td>\n",
       "      <td>0.081716</td>\n",
       "      <td>0.375645</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.403755</td>\n",
       "      <td>0.533242</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>18.000000</td>\n",
       "      <td>30.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000e+01</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.248742</td>\n",
       "      <td>-1.062828</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1219.500000</td>\n",
       "      <td>44.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>447.000000</td>\n",
       "      <td>1.000000e+02</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.178511</td>\n",
       "      <td>-0.826421</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1588.500000</td>\n",
       "      <td>79.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>447.000000</td>\n",
       "      <td>1.050000e+03</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.119603</td>\n",
       "      <td>-0.290084</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2164.250000</td>\n",
       "      <td>111.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>447.000000</td>\n",
       "      <td>1.259500e+04</td>\n",
       "      <td>30.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.048971</td>\n",
       "      <td>0.211137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2725.000000</td>\n",
       "      <td>150.00000</td>\n",
       "      <td>2557.000000</td>\n",
       "      <td>2494.000000</td>\n",
       "      <td>7.553011e+06</td>\n",
       "      <td>3410.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>19.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.177860</td>\n",
       "      <td>0.900403</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           user_id  DaysSinceLastTrans  reseller_id  superdealer_id  \\\n",
       "count   596.000000           596.00000   596.000000      596.000000   \n",
       "mean   1678.875839            78.52349   112.177852      428.124161   \n",
       "std     572.614527            34.35227   395.838128      211.884608   \n",
       "min      18.000000            30.00000     0.000000        0.000000   \n",
       "25%    1219.500000            44.00000     0.000000      447.000000   \n",
       "50%    1588.500000            79.00000     0.000000      447.000000   \n",
       "75%    2164.250000           111.00000     0.000000      447.000000   \n",
       "max    2725.000000           150.00000  2557.000000     2494.000000   \n",
       "\n",
       "       TotalTransactionAmount     Tx_Count    Cable TV   Education  \\\n",
       "count            5.960000e+02   596.000000  596.000000  596.000000   \n",
       "mean             6.420014e+04    51.011745    0.020134    0.015101   \n",
       "std              4.009832e+05   216.648012    0.162741    0.135126   \n",
       "min              1.000000e+01     1.000000    0.000000    0.000000   \n",
       "25%              1.000000e+02     1.000000    0.000000    0.000000   \n",
       "50%              1.050000e+03     4.000000    0.000000    0.000000   \n",
       "75%              1.259500e+04    30.000000    0.000000    0.000000   \n",
       "max              7.553011e+06  3410.000000    2.000000    2.000000   \n",
       "\n",
       "       Electricity       Telco  Universal Pin  used_reseller  \\\n",
       "count   596.000000  596.000000     596.000000     596.000000   \n",
       "mean      0.100671    3.332215       0.010067       0.087248   \n",
       "std       0.409877    3.367222       0.129249       0.282436   \n",
       "min       0.000000    0.000000       0.000000       0.000000   \n",
       "25%       0.000000    1.000000       0.000000       0.000000   \n",
       "50%       0.000000    2.000000       0.000000       0.000000   \n",
       "75%       0.000000    4.000000       0.000000       0.000000   \n",
       "max       4.000000   19.000000       2.000000       1.000000   \n",
       "\n",
       "       used_superdealer  superdealer    services  Cluster       PCA 1  \\\n",
       "count        596.000000   596.000000  596.000000    596.0  596.000000   \n",
       "mean           0.986577     0.006711    1.100671      0.0   -0.060482   \n",
       "std            0.115173     0.081716    0.375645      0.0    0.403755   \n",
       "min            0.000000     0.000000    1.000000      0.0   -0.248742   \n",
       "25%            1.000000     0.000000    1.000000      0.0   -0.178511   \n",
       "50%            1.000000     0.000000    1.000000      0.0   -0.119603   \n",
       "75%            1.000000     0.000000    1.000000      0.0   -0.048971   \n",
       "max            1.000000     1.000000    4.000000      0.0    7.177860   \n",
       "\n",
       "            PCA 2  \n",
       "count  596.000000  \n",
       "mean    -0.291293  \n",
       "std      0.533242  \n",
       "min     -1.062828  \n",
       "25%     -0.826421  \n",
       "50%     -0.290084  \n",
       "75%      0.211137  \n",
       "max      0.900403  "
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cluster_data_full[cluster_data_full['Cluster'] == 0].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>DaysSinceLastTrans</th>\n",
       "      <th>reseller_id</th>\n",
       "      <th>superdealer_id</th>\n",
       "      <th>TotalTransactionAmount</th>\n",
       "      <th>Tx_Count</th>\n",
       "      <th>Cable TV</th>\n",
       "      <th>Education</th>\n",
       "      <th>Electricity</th>\n",
       "      <th>Telco</th>\n",
       "      <th>Universal Pin</th>\n",
       "      <th>used_reseller</th>\n",
       "      <th>used_superdealer</th>\n",
       "      <th>superdealer</th>\n",
       "      <th>services</th>\n",
       "      <th>Cluster</th>\n",
       "      <th>PCA 1</th>\n",
       "      <th>PCA 2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000e+00</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>701.333333</td>\n",
       "      <td>56.333333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>566.666667</td>\n",
       "      <td>9.885444e+06</td>\n",
       "      <td>28304.333333</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>2.666667</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>1.0</td>\n",
       "      <td>16.786561</td>\n",
       "      <td>1.141576</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>836.732534</td>\n",
       "      <td>45.610671</td>\n",
       "      <td>0.0</td>\n",
       "      <td>931.330947</td>\n",
       "      <td>6.180623e+06</td>\n",
       "      <td>24144.032810</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.154701</td>\n",
       "      <td>6.244998</td>\n",
       "      <td>4.618802</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.577350</td>\n",
       "      <td>0.577350</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9.700612</td>\n",
       "      <td>0.867558</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>40.000000</td>\n",
       "      <td>30.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>3.357950e+06</td>\n",
       "      <td>1394.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>9.060601</td>\n",
       "      <td>0.174145</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>231.000000</td>\n",
       "      <td>30.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>29.000000</td>\n",
       "      <td>7.004175e+06</td>\n",
       "      <td>18422.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>11.343162</td>\n",
       "      <td>0.787119</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>422.000000</td>\n",
       "      <td>30.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>40.000000</td>\n",
       "      <td>1.065040e+07</td>\n",
       "      <td>35450.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>13.625723</td>\n",
       "      <td>1.400092</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1032.000000</td>\n",
       "      <td>69.500000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>841.000000</td>\n",
       "      <td>1.314919e+07</td>\n",
       "      <td>41759.500000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>10.500000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.500000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>20.649542</td>\n",
       "      <td>1.625291</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1642.000000</td>\n",
       "      <td>109.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1642.000000</td>\n",
       "      <td>1.564798e+07</td>\n",
       "      <td>48069.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>27.673360</td>\n",
       "      <td>1.850490</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           user_id  DaysSinceLastTrans  reseller_id  superdealer_id  \\\n",
       "count     3.000000            3.000000          3.0        3.000000   \n",
       "mean    701.333333           56.333333          0.0      566.666667   \n",
       "std     836.732534           45.610671          0.0      931.330947   \n",
       "min      40.000000           30.000000          0.0       18.000000   \n",
       "25%     231.000000           30.000000          0.0       29.000000   \n",
       "50%     422.000000           30.000000          0.0       40.000000   \n",
       "75%    1032.000000           69.500000          0.0      841.000000   \n",
       "max    1642.000000          109.000000          0.0     1642.000000   \n",
       "\n",
       "       TotalTransactionAmount      Tx_Count  Cable TV  Education  Electricity  \\\n",
       "count            3.000000e+00      3.000000       3.0        3.0     3.000000   \n",
       "mean             9.885444e+06  28304.333333       0.0        0.0     0.666667   \n",
       "std              6.180623e+06  24144.032810       0.0        0.0     1.154701   \n",
       "min              3.357950e+06   1394.000000       0.0        0.0     0.000000   \n",
       "25%              7.004175e+06  18422.000000       0.0        0.0     0.000000   \n",
       "50%              1.065040e+07  35450.000000       0.0        0.0     0.000000   \n",
       "75%              1.314919e+07  41759.500000       0.0        0.0     1.000000   \n",
       "max              1.564798e+07  48069.000000       0.0        0.0     2.000000   \n",
       "\n",
       "           Telco  Universal Pin  used_reseller  used_superdealer  superdealer  \\\n",
       "count   3.000000       3.000000            3.0               3.0     3.000000   \n",
       "mean    7.000000       2.666667            0.0               1.0     0.666667   \n",
       "std     6.244998       4.618802            0.0               0.0     0.577350   \n",
       "min     0.000000       0.000000            0.0               1.0     0.000000   \n",
       "25%     4.500000       0.000000            0.0               1.0     0.500000   \n",
       "50%     9.000000       0.000000            0.0               1.0     1.000000   \n",
       "75%    10.500000       4.000000            0.0               1.0     1.000000   \n",
       "max    12.000000       8.000000            0.0               1.0     1.000000   \n",
       "\n",
       "       services  Cluster      PCA 1     PCA 2  \n",
       "count  3.000000      3.0   3.000000  3.000000  \n",
       "mean   1.333333      1.0  16.786561  1.141576  \n",
       "std    0.577350      0.0   9.700612  0.867558  \n",
       "min    1.000000      1.0   9.060601  0.174145  \n",
       "25%    1.000000      1.0  11.343162  0.787119  \n",
       "50%    1.000000      1.0  13.625723  1.400092  \n",
       "75%    1.500000      1.0  20.649542  1.625291  \n",
       "max    2.000000      1.0  27.673360  1.850490  "
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cluster_data_full[cluster_data_full['Cluster'] == 1].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>DaysSinceLastTrans</th>\n",
       "      <th>reseller_id</th>\n",
       "      <th>superdealer_id</th>\n",
       "      <th>TotalTransactionAmount</th>\n",
       "      <th>Tx_Count</th>\n",
       "      <th>Cable TV</th>\n",
       "      <th>Education</th>\n",
       "      <th>Electricity</th>\n",
       "      <th>Telco</th>\n",
       "      <th>Universal Pin</th>\n",
       "      <th>used_reseller</th>\n",
       "      <th>used_superdealer</th>\n",
       "      <th>superdealer</th>\n",
       "      <th>services</th>\n",
       "      <th>Cluster</th>\n",
       "      <th>PCA 1</th>\n",
       "      <th>PCA 2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>83.00000</td>\n",
       "      <td>83.00000</td>\n",
       "      <td>83.000000</td>\n",
       "      <td>83.000000</td>\n",
       "      <td>8.300000e+01</td>\n",
       "      <td>83.000000</td>\n",
       "      <td>83.000000</td>\n",
       "      <td>83.000000</td>\n",
       "      <td>83.000000</td>\n",
       "      <td>83.000000</td>\n",
       "      <td>83.0</td>\n",
       "      <td>83.000000</td>\n",
       "      <td>83.000000</td>\n",
       "      <td>83.000000</td>\n",
       "      <td>83.000000</td>\n",
       "      <td>83.0</td>\n",
       "      <td>83.000000</td>\n",
       "      <td>83.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>680.60241</td>\n",
       "      <td>226.26506</td>\n",
       "      <td>0.674699</td>\n",
       "      <td>426.024096</td>\n",
       "      <td>2.219209e+05</td>\n",
       "      <td>70.481928</td>\n",
       "      <td>0.132530</td>\n",
       "      <td>0.397590</td>\n",
       "      <td>0.325301</td>\n",
       "      <td>2.939759</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.012048</td>\n",
       "      <td>0.915663</td>\n",
       "      <td>0.036145</td>\n",
       "      <td>1.385542</td>\n",
       "      <td>2.0</td>\n",
       "      <td>-0.172441</td>\n",
       "      <td>2.050431</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>259.01158</td>\n",
       "      <td>71.77371</td>\n",
       "      <td>6.146799</td>\n",
       "      <td>183.906258</td>\n",
       "      <td>6.062870e+05</td>\n",
       "      <td>165.119717</td>\n",
       "      <td>0.512552</td>\n",
       "      <td>0.492375</td>\n",
       "      <td>0.898623</td>\n",
       "      <td>3.347184</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.109764</td>\n",
       "      <td>0.279582</td>\n",
       "      <td>0.187784</td>\n",
       "      <td>0.621394</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.582128</td>\n",
       "      <td>1.119320</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>3.00000</td>\n",
       "      <td>153.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000e+01</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>-1.014243</td>\n",
       "      <td>0.884893</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>549.50000</td>\n",
       "      <td>187.50000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>447.000000</td>\n",
       "      <td>1.200000e+03</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>-0.384738</td>\n",
       "      <td>1.429325</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>773.00000</td>\n",
       "      <td>211.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>501.000000</td>\n",
       "      <td>1.120000e+04</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>-0.297940</td>\n",
       "      <td>1.802451</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>841.00000</td>\n",
       "      <td>237.50000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>501.000000</td>\n",
       "      <td>1.187750e+05</td>\n",
       "      <td>55.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>-0.216568</td>\n",
       "      <td>2.202437</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1095.00000</td>\n",
       "      <td>605.00000</td>\n",
       "      <td>56.000000</td>\n",
       "      <td>741.000000</td>\n",
       "      <td>3.826750e+06</td>\n",
       "      <td>1068.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.159443</td>\n",
       "      <td>7.980769</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          user_id  DaysSinceLastTrans  reseller_id  superdealer_id  \\\n",
       "count    83.00000            83.00000    83.000000       83.000000   \n",
       "mean    680.60241           226.26506     0.674699      426.024096   \n",
       "std     259.01158            71.77371     6.146799      183.906258   \n",
       "min       3.00000           153.00000     0.000000        0.000000   \n",
       "25%     549.50000           187.50000     0.000000      447.000000   \n",
       "50%     773.00000           211.00000     0.000000      501.000000   \n",
       "75%     841.00000           237.50000     0.000000      501.000000   \n",
       "max    1095.00000           605.00000    56.000000      741.000000   \n",
       "\n",
       "       TotalTransactionAmount     Tx_Count   Cable TV  Education  Electricity  \\\n",
       "count            8.300000e+01    83.000000  83.000000  83.000000    83.000000   \n",
       "mean             2.219209e+05    70.481928   0.132530   0.397590     0.325301   \n",
       "std              6.062870e+05   165.119717   0.512552   0.492375     0.898623   \n",
       "min              1.000000e+01     1.000000   0.000000   0.000000     0.000000   \n",
       "25%              1.200000e+03     5.000000   0.000000   0.000000     0.000000   \n",
       "50%              1.120000e+04    14.000000   0.000000   0.000000     0.000000   \n",
       "75%              1.187750e+05    55.000000   0.000000   1.000000     0.000000   \n",
       "max              3.826750e+06  1068.000000   3.000000   1.000000     5.000000   \n",
       "\n",
       "           Telco  Universal Pin  used_reseller  used_superdealer  superdealer  \\\n",
       "count  83.000000           83.0      83.000000         83.000000    83.000000   \n",
       "mean    2.939759            0.0       0.012048          0.915663     0.036145   \n",
       "std     3.347184            0.0       0.109764          0.279582     0.187784   \n",
       "min     0.000000            0.0       0.000000          0.000000     0.000000   \n",
       "25%     1.000000            0.0       0.000000          1.000000     0.000000   \n",
       "50%     2.000000            0.0       0.000000          1.000000     0.000000   \n",
       "75%     4.000000            0.0       0.000000          1.000000     0.000000   \n",
       "max    16.000000            0.0       1.000000          1.000000     1.000000   \n",
       "\n",
       "        services  Cluster      PCA 1      PCA 2  \n",
       "count  83.000000     83.0  83.000000  83.000000  \n",
       "mean    1.385542      2.0  -0.172441   2.050431  \n",
       "std     0.621394      0.0   0.582128   1.119320  \n",
       "min     1.000000      2.0  -1.014243   0.884893  \n",
       "25%     1.000000      2.0  -0.384738   1.429325  \n",
       "50%     1.000000      2.0  -0.297940   1.802451  \n",
       "75%     2.000000      2.0  -0.216568   2.202437  \n",
       "max     4.000000      2.0   3.159443   7.980769  "
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cluster_data_full[cluster_data_full['Cluster'] == 2].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## RMF ANALYSIS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "customer_data = result[['TotalTransactionAmount','Tx_Count','DaysSinceLastTrans']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-44-4e38c10aabbe>:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  customer_data[\"RecencyScore\"] = pd.cut(customer_data[\"DaysSinceLastTrans\"],\n"
     ]
    }
   ],
   "source": [
    "customer_data[\"RecencyScore\"] = pd.cut(customer_data[\"DaysSinceLastTrans\"], \n",
    "                                       bins=[-1, \n",
    "                                         np.percentile(customer_data[\"DaysSinceLastTrans\"], 25), \n",
    "                                             np.percentile(customer_data[\"DaysSinceLastTrans\"], 50), \n",
    "                                             np.percentile(customer_data[\"DaysSinceLastTrans\"], 75), \n",
    "                                             customer_data[\"DaysSinceLastTrans\"].max()], \n",
    "                                       labels=[4, 3, 2, 1]).astype(\"int\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-45-22df6ec1664e>:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  customer_data[\"FrequencyScore\"] = pd.cut(customer_data[\"Tx_Count\"],\n"
     ]
    }
   ],
   "source": [
    "customer_data[\"FrequencyScore\"] = pd.cut(customer_data[\"Tx_Count\"], \n",
    "                                       bins=[-1, \n",
    "                                         np.percentile(customer_data[\"Tx_Count\"], 25), \n",
    "                                             np.percentile(customer_data[\"Tx_Count\"], 50), \n",
    "                                             np.percentile(customer_data[\"Tx_Count\"], 75), \n",
    "                                             customer_data[\"Tx_Count\"].max()], \n",
    "                                       labels=[1, 2, 3, 4]).astype(\"int\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-46-0781ff34ea94>:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  customer_data[\"MonetaryScore\"] = pd.cut(customer_data[\"TotalTransactionAmount\"],\n"
     ]
    }
   ],
   "source": [
    "customer_data[\"MonetaryScore\"] = pd.cut(customer_data[\"TotalTransactionAmount\"], \n",
    "                                       bins=[-1, \n",
    "                                         np.percentile(customer_data[\"TotalTransactionAmount\"], 25), \n",
    "                                             np.percentile(customer_data[\"TotalTransactionAmount\"], 50), \n",
    "                                             np.percentile(customer_data[\"TotalTransactionAmount\"], 75), \n",
    "                                             customer_data[\"TotalTransactionAmount\"].max()], \n",
    "                                       labels=[1, 2, 3, 4]).astype(\"int\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RecencyScore</th>\n",
       "      <th>FrequencyScore</th>\n",
       "      <th>MonetaryScore</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>678</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>679</th>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>680</th>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>681</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>682</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>682 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     RecencyScore  FrequencyScore  MonetaryScore\n",
       "0               1               1              1\n",
       "1               1               2              1\n",
       "2               4               4              4\n",
       "3               1               1              1\n",
       "4               1               2              3\n",
       "..            ...             ...            ...\n",
       "678             4               4              3\n",
       "679             4               2              2\n",
       "680             4               2              2\n",
       "681             4               1              2\n",
       "682             4               1              2\n",
       "\n",
       "[682 rows x 3 columns]"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "customer_data = customer_data[['RecencyScore','FrequencyScore','MonetaryScore']]\n",
    "customer_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\OLAMIDE\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "customer_recency = customer_data.RecencyScore.value_counts().sort_values()\n",
    "plt.figure(figsize=(15, 6))\n",
    "sns.barplot(customer_recency.index, customer_recency.values, alpha=0.8)\n",
    "plt.title('customer_recency_score')\n",
    "plt.ylabel('Number of Occurrences', fontsize=12)\n",
    "plt.xlabel('Degree of Recency ', fontsize=12)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\OLAMIDE\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "customer_FrequencyScore = customer_data.FrequencyScore.value_counts().sort_values()\n",
    "plt.figure(figsize=(15, 6))\n",
    "sns.barplot(customer_FrequencyScore.index, customer_FrequencyScore.values, alpha=0.8)\n",
    "plt.title('customer_FrequencyScore')\n",
    "plt.ylabel('Number of Occurrences', fontsize=12)\n",
    "plt.xlabel('Degree of Frequency ', fontsize=12)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\OLAMIDE\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "customer_MonetaryScore = customer_data.MonetaryScore.value_counts().sort_values()\n",
    "plt.figure(figsize=(15, 6))\n",
    "sns.barplot(customer_MonetaryScore.index, customer_MonetaryScore.values, alpha=0.8)\n",
    "plt.title('customer_MonetaryScore')\n",
    "plt.ylabel('Number of Occurrences', fontsize=12)\n",
    "plt.xlabel('Degree of MonetaryScore ', fontsize=12)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "wcss = []\n",
    "for k in range(1,11):\n",
    "    kmeans = KMeans(n_clusters=k, init=\"k-means++\")\n",
    "    kmeans.fit(customer_data)\n",
    "    wcss.append(kmeans.inertia_)\n",
    "plt.figure(figsize=(12,6))    \n",
    "plt.plot(range(1,11),wcss, linewidth=2, color=\"red\", marker =\"8\")\n",
    "plt.xlabel(\"K Value\")\n",
    "plt.xticks(np.arange(1,11,1))\n",
    "plt.ylabel(\"WCSS\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "kmeans = KMeans(n_clusters=4, random_state=42)\n",
    "prediction = kmeans.fit_predict(customer_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "customer_data['Cluster'] = prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create a function to generate pie charts for a given categorical feature\n",
    "def cluster_demographic(var):\n",
    "    \n",
    "    # Create subsets for each cluster\n",
    "    df_0 = customer_data[customer_data['Cluster']==0]\n",
    "    df_1 = customer_data[customer_data['Cluster']==1]\n",
    "    df_2 = customer_data[customer_data['Cluster']==2]\n",
    "    df_3 = customer_data[customer_data['Cluster']==3]\n",
    "\n",
    "    fig, ax = plt.subplots(2, 2)\n",
    "\n",
    "\n",
    "    ax[0,0].pie(df_0[var].value_counts(), labels=df_0[var].value_counts().index)\n",
    "    ax[0,0].title.set_text('Cluster 0')\n",
    "    ax[0,1].pie(df_1[var].value_counts(), labels=df_1[var].value_counts().index)\n",
    "    ax[0,1].title.set_text('Cluster 1')\n",
    "    ax[1,0].pie(df_2[var].value_counts(), labels=df_2[var].value_counts().index)\n",
    "    ax[1,0].title.set_text('Cluster 2')\n",
    "    ax[1,1].pie(df_3[var].value_counts(), labels=df_3[var].value_counts().index)\n",
    "    ax[1,1].title.set_text('Cluster 3')\n",
    "    plt.suptitle(var)\n",
    "\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Comparing clusters based on recency\n",
    "cluster_demographic('RecencyScore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cluster_demographic('FrequencyScore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cluster_demographic('MonetaryScore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 3600x1440 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure(figsize=(50,20))\n",
    "ax = fig.add_subplot(111, projection='3d')\n",
    "ax.scatter(customer_data.MonetaryScore[customer_data.Cluster == 0], customer_data[\"FrequencyScore\"][customer_data.Cluster == 0], customer_data[\"RecencyScore\"][customer_data.Cluster == 0], c='blue', s=60)\n",
    "ax.scatter(customer_data.MonetaryScore[customer_data.Cluster == 1], customer_data[\"FrequencyScore\"][customer_data.Cluster == 1], customer_data[\"RecencyScore\"][customer_data.Cluster == 1], c='red', s=60)\n",
    "ax.scatter(customer_data.MonetaryScore[customer_data.Cluster == 2], customer_data[\"FrequencyScore\"][customer_data.Cluster == 2], customer_data[\"RecencyScore\"][customer_data.Cluster == 2], c='green', s=60)\n",
    "ax.scatter(customer_data.MonetaryScore[customer_data.Cluster == 3], customer_data[\"FrequencyScore\"][customer_data.Cluster == 3], customer_data[\"RecencyScore\"][customer_data.Cluster == 3], c='orange', s=60)\n",
    "\n",
    "ax.view_init(30, 185)\n",
    "plt.xlabel(\"MonetaryScore\")\n",
    "plt.ylabel(\"FrequencyScore\")\n",
    "ax.set_zlabel('RecencyScore')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RecencyScore</th>\n",
       "      <th>FrequencyScore</th>\n",
       "      <th>MonetaryScore</th>\n",
       "      <th>Cluster</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>678</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>679</th>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>680</th>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>681</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>682</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>682 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     RecencyScore  FrequencyScore  MonetaryScore  Cluster\n",
       "0               1               1              1        0\n",
       "1               1               2              1        0\n",
       "2               4               4              4        1\n",
       "3               1               1              1        0\n",
       "4               1               2              3        2\n",
       "..            ...             ...            ...      ...\n",
       "678             4               4              3        1\n",
       "679             4               2              2        3\n",
       "680             4               2              2        3\n",
       "681             4               1              2        3\n",
       "682             4               1              2        3\n",
       "\n",
       "[682 rows x 4 columns]"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "customer_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "def label(row):\n",
    "    if row['Cluster'] == 0:\n",
    "        return 'lost'\n",
    "    elif row['Cluster'] == 1 :\n",
    "        return 'loyal/core'\n",
    "    elif row['Cluster'] == 2 :\n",
    "        return 'slipping'\n",
    "    elif row['Cluster'] == 3 :\n",
    "        return 'Faithful'\n",
    "             \n",
    "result['label'] = customer_data.apply(lambda row: label(row), axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>DaysSinceLastTrans</th>\n",
       "      <th>reseller_id</th>\n",
       "      <th>superdealer_id</th>\n",
       "      <th>TotalTransactionAmount</th>\n",
       "      <th>Tx_Count</th>\n",
       "      <th>Cable TV</th>\n",
       "      <th>Education</th>\n",
       "      <th>Electricity</th>\n",
       "      <th>Telco</th>\n",
       "      <th>Universal Pin</th>\n",
       "      <th>used_reseller</th>\n",
       "      <th>used_superdealer</th>\n",
       "      <th>superdealer</th>\n",
       "      <th>services</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>351</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>100</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>14</td>\n",
       "      <td>231</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>51</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>18</td>\n",
       "      <td>35</td>\n",
       "      <td>0.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>27338</td>\n",
       "      <td>70</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>loyal/core</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>19</td>\n",
       "      <td>605</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>100</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>lost</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>32</td>\n",
       "      <td>132</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7800</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>slipping</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>678</th>\n",
       "      <td>2682</td>\n",
       "      <td>30</td>\n",
       "      <td>2557.0</td>\n",
       "      <td>501.0</td>\n",
       "      <td>10050</td>\n",
       "      <td>40</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>loyal/core</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>679</th>\n",
       "      <td>2684</td>\n",
       "      <td>39</td>\n",
       "      <td>464.0</td>\n",
       "      <td>501.0</td>\n",
       "      <td>1200</td>\n",
       "      <td>2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Faithful</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>680</th>\n",
       "      <td>2690</td>\n",
       "      <td>32</td>\n",
       "      <td>464.0</td>\n",
       "      <td>501.0</td>\n",
       "      <td>1400</td>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Faithful</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>681</th>\n",
       "      <td>2694</td>\n",
       "      <td>35</td>\n",
       "      <td>464.0</td>\n",
       "      <td>501.0</td>\n",
       "      <td>300</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Faithful</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>682</th>\n",
       "      <td>2725</td>\n",
       "      <td>30</td>\n",
       "      <td>1802.0</td>\n",
       "      <td>447.0</td>\n",
       "      <td>200</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Faithful</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>682 rows × 16 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     user_id  DaysSinceLastTrans  reseller_id  superdealer_id  \\\n",
       "0          3                 351          0.0             0.0   \n",
       "1         14                 231          0.0             0.0   \n",
       "2         18                  35          0.0            18.0   \n",
       "3         19                 605          0.0             0.0   \n",
       "4         32                 132          0.0             0.0   \n",
       "..       ...                 ...          ...             ...   \n",
       "678     2682                  30       2557.0           501.0   \n",
       "679     2684                  39        464.0           501.0   \n",
       "680     2690                  32        464.0           501.0   \n",
       "681     2694                  35        464.0           501.0   \n",
       "682     2725                  30       1802.0           447.0   \n",
       "\n",
       "     TotalTransactionAmount  Tx_Count  Cable TV  Education  Electricity  \\\n",
       "0                       100         1       0.0        0.0          0.0   \n",
       "1                        51         2       0.0        0.0          0.0   \n",
       "2                     27338        70       1.0        0.0          2.0   \n",
       "3                       100         1       0.0        0.0          0.0   \n",
       "4                      7800         2       0.0        0.0          0.0   \n",
       "..                      ...       ...       ...        ...          ...   \n",
       "678                   10050        40       0.0        0.0          0.0   \n",
       "679                    1200         2       0.0        0.0          0.0   \n",
       "680                    1400         3       0.0        0.0          0.0   \n",
       "681                     300         1       0.0        0.0          0.0   \n",
       "682                     200         1       0.0        0.0          0.0   \n",
       "\n",
       "     Telco  Universal Pin  used_reseller  used_superdealer  superdealer  \\\n",
       "0      1.0            0.0              0                 0            0   \n",
       "1      1.0            0.0              0                 0            0   \n",
       "2      9.0            0.0              0                 1            1   \n",
       "3      1.0            0.0              0                 0            0   \n",
       "4      2.0            0.0              0                 0            0   \n",
       "..     ...            ...            ...               ...          ...   \n",
       "678    5.0            0.0              1                 1            0   \n",
       "679    2.0            0.0              1                 1            0   \n",
       "680    1.0            0.0              1                 1            0   \n",
       "681    1.0            0.0              1                 1            0   \n",
       "682    1.0            0.0              1                 1            0   \n",
       "\n",
       "     services       label  \n",
       "0           1        lost  \n",
       "1           1        lost  \n",
       "2           3  loyal/core  \n",
       "3           1        lost  \n",
       "4           1    slipping  \n",
       "..        ...         ...  \n",
       "678         1  loyal/core  \n",
       "679         1    Faithful  \n",
       "680         1    Faithful  \n",
       "681         1    Faithful  \n",
       "682         1    Faithful  \n",
       "\n",
       "[682 rows x 16 columns]"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "customer_segment  = pd.DataFrame(result.groupby('label').agg({'user_id':'count',\n",
    "                                                                'TotalTransactionAmount':'sum', \n",
    "                                                                'Tx_Count':'sum',\n",
    "                                                             'DaysSinceLastTrans':'mean'}))\n",
    "customer_segment['%Customers'] = (customer_segment['user_id'] / sum(customer_segment['user_id'] ))*100\n",
    "customer_segment['%Revenue'] = (customer_segment['TotalTransactionAmount'] / sum(customer_segment['TotalTransactionAmount'] ))*100\n",
    "customer_segment['%Tx_Count'] = (customer_segment['Tx_Count'] / sum(customer_segment['Tx_Count'] ))*100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>TotalTransactionAmount</th>\n",
       "      <th>Tx_Count</th>\n",
       "      <th>DaysSinceLastTrans</th>\n",
       "      <th>%Customers</th>\n",
       "      <th>%Revenue</th>\n",
       "      <th>%Tx_Count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>label</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Faithful</th>\n",
       "      <td>150</td>\n",
       "      <td>596353</td>\n",
       "      <td>1519</td>\n",
       "      <td>57.520000</td>\n",
       "      <td>21.994135</td>\n",
       "      <td>0.690711</td>\n",
       "      <td>1.253652</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>lost</th>\n",
       "      <td>271</td>\n",
       "      <td>68296</td>\n",
       "      <td>387</td>\n",
       "      <td>112.450185</td>\n",
       "      <td>39.736070</td>\n",
       "      <td>0.079102</td>\n",
       "      <td>0.319397</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>loyal/core</th>\n",
       "      <td>144</td>\n",
       "      <td>54288721</td>\n",
       "      <td>110650</td>\n",
       "      <td>42.208333</td>\n",
       "      <td>21.114370</td>\n",
       "      <td>62.878523</td>\n",
       "      <td>91.320998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>slipping</th>\n",
       "      <td>117</td>\n",
       "      <td>31385683</td>\n",
       "      <td>8610</td>\n",
       "      <td>175.803419</td>\n",
       "      <td>17.155425</td>\n",
       "      <td>36.351665</td>\n",
       "      <td>7.105954</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            user_id  TotalTransactionAmount  Tx_Count  DaysSinceLastTrans  \\\n",
       "label                                                                       \n",
       "Faithful        150                  596353      1519           57.520000   \n",
       "lost            271                   68296       387          112.450185   \n",
       "loyal/core      144                54288721    110650           42.208333   \n",
       "slipping        117                31385683      8610          175.803419   \n",
       "\n",
       "            %Customers   %Revenue  %Tx_Count  \n",
       "label                                         \n",
       "Faithful     21.994135   0.690711   1.253652  \n",
       "lost         39.736070   0.079102   0.319397  \n",
       "loyal/core   21.114370  62.878523  91.320998  \n",
       "slipping     17.155425  36.351665   7.105954  "
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "customer_segment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\OLAMIDE\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "customer_count = customer_segment['%Customers'].sort_values()\n",
    "plt.figure(figsize=(15, 6))\n",
    "sns.barplot(customer_count.index, customer_count.values, alpha=0.8)\n",
    "plt.title('customer_count')\n",
    "plt.ylabel('Number of Occurrences', fontsize=12)\n",
    "plt.xlabel(' Customers', fontsize=12)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\OLAMIDE\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "transaction_count = customer_segment['%Tx_Count'].sort_values()\n",
    "plt.figure(figsize=(15, 6))\n",
    "sns.barplot(transaction_count.index, transaction_count.values, alpha=0.8)\n",
    "plt.title('transaction_count')\n",
    "plt.ylabel('Number of Occurrences', fontsize=12)\n",
    "plt.xlabel(' Customers', fontsize=12)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\OLAMIDE\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "Revenue_generated = customer_segment['%Revenue'].sort_values()\n",
    "plt.figure(figsize=(15, 6))\n",
    "sns.barplot(Revenue_generated.index, Revenue_generated.values, alpha=0.8)\n",
    "plt.title('Revenue_generated')\n",
    "plt.ylabel('Number of Occurrences', fontsize=12)\n",
    "plt.xlabel(' Customers', fontsize=12)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<ol>\n",
    "<li>    \n",
    "<b>Core/Loyal</b> - Your Best Customers<br>\n",
    "Who They Are: Highly engaged customers who have bought the most recent, the most often, and generated the most revenue.\n",
    "</li>\n",
    "<li>\n",
    "<b>Slipping</b> - Once Loyal, Now Gone<br>\n",
    "Who They Are: Great past customers who haven't bought in awhile.\n",
    "</li>\n",
    "<li>\n",
    "<b>Faithful</b> - The customers having common behaviour across these metrics.<br>\n",
    "Who They Are: Customer who have average metrics across each RFM scores.\n",
    "</li>\n",
    "<li>\n",
    "<b>Lost</b> - The customers with low recency, frequency and monetary value\n",
    "</li>\n",
    "</ol>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "with pd.ExcelWriter('ho.xlsx') as writer:\n",
    "    result.to_excel(writer, sheet_name = 'sheet1', index = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
